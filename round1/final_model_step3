import math

def reward_function(params):
    # ─── 전체 좌표 동일 ───
    
    racing_track =  [
        [8.54861, 3.17394, 3.5], [8.34696, 3.17288, 3.5], [8.14534, 3.16945, 2.2173],
        [7.9437,  3.17026, 2.2173],  [7.74208, 3.17388, 2.2173], [7.54044, 3.17271, 2.10872],
        [7.33883, 3.16878, 1.68122],[7.13746, 3.17531, 1.5923],  [6.93942, 3.2128,  1.5923],
        [6.74666, 3.27162, 1.5923], [6.5565,  3.33852, 1.5923],  [6.35818, 3.37203, 1.5923],
        [6.15836, 3.3517,  1.5923], [5.97304, 3.27302, 1.78794],[5.7831,  3.20663, 1.78794],
        [5.58254, 3.18686, 3.16751],[5.38186, 3.16761, 3.16751],[5.18026, 3.16361, 3.5   ],
        [4.97861, 3.16373, 3.5   ], [4.777,   3.16781, 3.5   ], [4.57536, 3.16932, 3.5   ],
        [4.37371, 3.16804, 3.5   ], [4.17206, 3.16802, 3.5   ], [3.97041, 3.16883, 3.5   ],
        [3.76876, 3.16972, 3.5   ], [3.56711, 3.17069, 3.5   ], [3.36546, 3.17165, 3.5   ],
        [3.16381, 3.17214, 3.5   ], [2.96216, 3.1739,  3.5   ], [2.76053, 3.17645, 2.33917],
        [2.55888, 3.17661, 2.18282],[2.35727, 3.17291, 2.18282],[2.15587, 3.16279, 2.07599],
        [1.95429, 3.15845, 2.07599],[1.75279, 3.16412, 1.48788],[1.55414, 3.19761, 1.48374],
        [1.36342, 3.2622,  1.48374],[1.17883, 3.34299, 1.48374],[0.98303, 3.39011, 1.48374],
        [0.78205, 3.40232, 1.48374],[0.58971, 3.34639, 1.48374],[0.42712, 3.2283,  1.51737],
        [0.30783, 3.06674, 1.51737],[0.24734, 2.87493, 2.66346],[0.20758, 2.67724, 1.95971],
        [0.16923, 2.47927, 1.64512],[0.12879, 2.28172, 1.62044],[0.08933, 2.08396, 1.58884],
        [0.05045, 1.88609, 1.58884],[0.01244, 1.68806, 1.58884],[0.01407, 1.48727, 1.58884],
        [0.07138, 1.29448, 1.58884],[0.18121, 1.12628, 1.58884],[0.33609, 0.99815, 1.69129],
        [0.51934, 0.91513, 2.17231],[0.71359, 0.86251, 2.64151],[0.9113,  0.82284, 2.64151],
        [1.11132, 0.79873, 2.64151],[1.3122,  0.78331, 2.48667],[1.51033, 0.74612, 2.48667],
        [1.70378, 0.68944, 2.48667],[1.89507, 0.62562, 2.48667],[2.08593, 0.56055, 2.48667],
        [2.27928, 0.50595, 2.22501],[2.47854, 0.47534, 2.22501],[2.679,   0.45341, 2.22501],
        [2.87966, 0.43352, 2.01153],[3.08048, 0.41525, 1.80145],[3.28179, 0.41293, 1.80145],
        [3.48132, 0.44145, 1.80145],[3.67497, 0.49666, 1.80145],[3.86265, 0.57016, 1.80145],
        [4.06043, 0.60725, 1.80145],[4.26142, 0.59741, 1.56655],[4.45573, 0.54476, 1.56655],
        [4.63522, 0.45377, 1.56655],[4.8142,  0.36131, 1.56655],[5.00562, 0.29867, 1.56655],
        [5.20439, 0.26524, 1.56655],[5.40246, 0.29377, 1.60486],[5.58469, 0.37907, 1.76746],
        [5.74973, 0.49457, 1.76746],[5.89772, 0.63132, 1.76746],[6.02738, 0.78567, 1.76746],
        [6.18866, 0.90566, 1.76746],[6.37435, 0.98337, 2.0331 ],[6.57115, 1.02583, 1.79009],
        [6.77196, 1.04399, 1.77219],[6.97354, 1.04728, 1.51184],[7.17288, 1.01777, 1.51184],
        [7.37233, 0.9881,  1.48722],[7.56838, 0.9427,  1.46155],[7.74813, 0.85258, 1.46155],
        [7.90125, 0.72181, 1.46155],[8.00254, 0.54962, 1.46155],[8.0774,  0.36339, 1.46155],
        [8.21063, 0.21329, 1.46155],[8.38762, 0.11911, 1.622  ],[8.58513, 0.07905, 3.5    ],
        [8.78439, 0.0481,  1.6431 ],[8.98469, 0.02489, 1.6431 ],[9.18583, 0.01077, 1.47457],
        [9.38736, 0.00586, 1.4332 ],[9.58741, 0.02668, 1.4332 ],[9.77374, 0.10227, 1.4332 ],
        [9.93298, 0.22484, 1.4332 ],[10.04023,0.39388, 1.4332 ],[10.07921,0.59097, 1.7908 ],
        [10.07081,0.7922,  3.09048],[10.04642,0.99236, 3.5    ],[10.02742,1.19311, 3.5    ],
        [10.00581,1.3936,  3.5    ],[9.98378, 1.59404, 3.25622],[9.96141, 1.79445, 1.54038],
        [9.94145, 1.99511, 1.4    ],[9.91647, 2.1951,  1.4    ],[9.88355, 2.39404, 1.4    ],
        [9.85291, 2.59335, 1.4    ],[9.80824, 2.78935, 1.4    ],[9.70432, 2.96096, 1.4    ],
        [9.54351, 3.0803,  1.56491],[9.35301, 3.14517, 2.00132],[9.15341, 3.17298, 2.45628],
        [8.9519,  3.17549, 3.5    ],[8.75026, 3.17344, 3.5    ]
    ]

    x, y       = params['x'], params['y']
    speed      = params['speed']
    heading    = params['heading']
    track_w    = params['track_width']

    # 1) 인덱스
    dists  = [math.hypot(x-p[0], y-p[1]) for p in racing_track]
    idx    = dists.index(min(dists))
    prev_i = (idx-1) % len(racing_track)
    next_i = (idx+1) % len(racing_track)
    p_prev = racing_track[prev_i]
    p_next = racing_track[next_i]
    v_nom  = racing_track[idx][2]

    # 2) distance
    dist   = dists[idx]
    r_dist = max(1e-3, 1 - dist / (0.5 * track_w))

    # 3) direction
    track_dir = math.degrees(math.atan2(
                    p_next[1]-p_prev[1],
                    p_next[0]-p_prev[0]
                ))
    diff  = abs((track_dir - heading + 540) % 360 - 180)
    r_head= max(1e-3, 1 - diff / 30)

    # 4) speed (곡률 보정)
    curv     = abs(math.atan2(p_next[1]-p_prev[1], p_next[0]-p_prev[0]))
    v_target = max(1.4, v_nom * (1 - 1.2 * (curv / 1.5)))
    r_speed  = max(1e-3, 1 - (abs(v_target-speed) / 0.8)**2)

    # 5) smoothness
    jerk    = abs(params.get('steering_angle',0) - params.get('prev_steering_angle',0))
    acc_chg = abs(speed - params.get('prev_speed', speed))
    r_smooth= max(1e-3, 1 - 0.06 * jerk - 0.12 * acc_chg)

    # 6) combine
    reward = 1.0 \
           + 2.5 * r_dist \
           + 1.5 * r_head \
           + 2.5 * r_speed \
           + 1.2 * r_smooth

    # 7) penalty
    if params['is_offtrack'] or diff > 45:
        return float(1e-3)

    return float(reward)
